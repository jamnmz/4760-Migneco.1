#include <stdlib.h>
#include <string.h>
#include <time.h>

typedef struct data_struct {
        time_t time;
        char   type;
        char*  string;
} data_t;

//print time functoin from http://simplestcodings.blogspot.com/2010/10/simple-logger-in-c.html
char* print_time()
{
    int size = 0;
    time_t t;
    char *buf;

    t=time(NULL); /* get current calendar time */

    char *timestr = asctime( localtime(&t) );
    timestr[strlen(timestr) - 1] = 0;  //Getting rid of \n

    size = strlen(timestr)+ 1 + 2; //Additional +2 for square braces
    buf = (char*)malloc(size);

    memset(buf, 0x0, size);
    snprintf(buf,size,"[%s]", timestr);

    return buf;
}

//addmsg function
int addmsg(const char type, const char* msg)
{

        return 0;
}

//clearlog function
void clearlog(void)
{

}

//getlog function
char *getlog(void)
{

        return NULL;
}

//savelog function
int savelog(char *filename)
{

        return 0;
}

//usage statement
void print_usage ( const char * app )
{

        fprintf (stderr, "usage: %s [-h] [-t time] [logfile]\n", app);
}

//Main function
int main(int argc, char *argv[])
{
        options_t options;
        // Set default values
        options.rows = 480;
        options.cols = 640;
        options.dir = ( char * ) malloc ( MAX_CANON * sizeof ( char ) );
        strcpy ( options.dir, "." );
        const char optstr[] = "h:t:logfile:";
        char opt;
        while ( ( opt = getopt ( argc, argv, optstr ) ) != -1 )
        {
                switch ( opt )
                {
                        case 'h':
                                print_usage ( argv[0] );
                                return ( EXIT_SUCCESS );
                        case 't':
                                options.cols = atoi ( optarg );
                                break;
                        default: /* '?' */
                                printf ( "Invalid option %c\n", optopt );
                                print_usage ( argv[0] );
                                return ( EXIT_FAILURE );
                }
        }
}
