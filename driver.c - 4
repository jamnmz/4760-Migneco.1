/*
 *Jared Migneco
 *Cmpsci 4760 Proj 1
 *due 09-15-22
 *
 */
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <stdio.h>
#include <stdarg.h>
FILE *fp;


typedef struct data_struct {
        time_t time;
        char   type;
        char*  string;
} data_t;

//print time function from http://simplestcodings.blogspot.com/2010/10/simple-logger-in-c.html
char* print_time()
{
        int size = 0;
        char *buf;
        t=time(NULL); /* get current calendar time */
        char *timestr = asctime( localtime(&t) );
        timestr[strlen(timestr) - 1] = 0;  //Getting rid of \n
        size = strlen(timestr)+ 1 + 2; //Additional +2 for square braces
        buf = (char*)malloc(size);
        memset(buf, 0x0, size);
        snprintf(buf,size,"[%s]", timestr);
        return buf;
}

//addmsg function
int addmsg(const char type, const char* msg)
{
        char type = msg;
        //switch statement handles file types
        switch (type)
        {
                case'i':
                case'I':
                        fprintf(fp,"%s ",print_time());
                        break;
                case'w':
                case'W':
                        fprintf(fp,"%s ",print_time());
                        break;
                case'e':
                case'E':
                        fprintf(fp,"%s ",print_time());
                        break;
                case'f':
                case'F':

                        fprintf(fp,"%s ",print_time());
                        exit(0);
                default: /* '?' */
                        printf ( "Invalid option %c\n", optopt );
                        print_usage ( argv[0] );
                        return ( EXIT_FAILURE );

        }
        return 0;
}

//clearlog function
void clearlog(void)
{

}

//getlog function
char *getlog(void)
{

        return NULL;
}

//savelog function
//modifies some of code from http://simplestcodings.blogspot.com/2010/10/simple-logger-in-c.html
int savelog(char *filename)
{
        if ()
        {
                fp = fopen("log.txt", "a+" );
        }



        return 0;
}

//usage statement
void print_usage ( const char * app )
{
        fprintf (stderr, "usage: %s [-h] [-t time] [logfile]\n", app);
}

//Main function
int main(int argc, char *argv[])
{
        options_t options;
        // Set default values
        options.rows = 480;
        options.cols = 640;
        options.dir = ( char * ) malloc ( MAX_CANON * sizeof ( char ) );
        strcpy ( options.dir, "." );
        const char optstr[] = "h:t:logfile:";
        char opt;
        while ( ( opt = getopt ( argc, argv, optstr ) ) != -1 )
        {
                switch ( opt )
                {
                        case 'h':
                                print_usage ( argv[0] );
                                return ( EXIT_SUCCESS );
                        case 't':
                                int sec = atoi ( optarg );
                                int t = 0;

                                //generates value for random time between 0 and user-supplied t value
                                t = 2 * (rand() % (sec + 1));
                                break;
                        default: /* '?' */
                                printf ( "Invalid option %c\n", optopt );
                                print_usage ( argv[0] );
                                return ( EXIT_FAILURE );
                }
        }
        if()
        {

        }
        else
        {
                fp = fopen("log.txt", "w");
        }
}
